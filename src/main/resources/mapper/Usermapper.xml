<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.selffun.joys4fellow.mapper.UserMapper" >

    <!--开启本mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象

        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。

        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象

        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改
    -->
    <!--<cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>-->

    <!-- 查询用户请求ip是否已经存在数据库 -->
    <select id="checkIP" parameterType="Visitor" resultType="Visitor">
        SELECT id,username,ip,total_visit_time AS totalVisitTimes FROM visitors WHERE ip = #{ip}
    </select>

    <!-- 校验用户名是否重复 -->
    <select id="checkUsername" parameterType="Visitor" resultType="Visitor">
        SELECT id FROM visitors WHERE username = #{username}
    </select>

    <!-- 查询用户列表 -->
    <select id="searchUserList" resultType="map">
        SELECT username,count(*) AS num,max(comments_time) AS latestTime FROM comments GROUP BY username
    </select>

    <!--  通过指定username查找用户的所有评论 -->
    <select id="searchCommentsByUsername" parameterType="Comments" resultType="Comments">
        SELECT comments FROM comments WHERE username = #{username}
    </select>

    <select id="searchLast50Comments" parameterType="Comments" resultType="Comments">
        SELECT username,comments,comments_time AS commentsTime FROM comments ORDER BY comments_time desc limit 50
    </select>

    <!-- 保存用户的用户名和IP地址到visitors表 -->
    <insert id="addUser" parameterType="Visitor">
        INSERT INTO visitors (username,ip) VALUES (#{username},#{ip})
    </insert>

    <!-- 保存用户的用户名、评论内容、评论时间到comments表 -->
    <insert id="add2Comments">
        INSERT INTO comments (username,comments,comments_time) VALUES (#{username},#{comments},#{timestamp})
    </insert>

    <!-- 保存用户的评论时间到visitors表 -->
    <update id="addCommentsTime" parameterType="Visitor">
        UPDATE visitors SET latest_time = #{timestamp} WHERE ip = #{ip}
    </update>

    <!--  保存用户访问次数 -->
    <update id="updateTotalVisitTimes" parameterType="Visitor">
        UPDATE visitors SET total_visit_time = #{totalVisitTimes} WHERE ip = #{ip}
    </update>


</mapper>